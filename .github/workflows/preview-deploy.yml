name: Deploy Preview

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number for preview deployment'
        required: true
        type: string
      channel_id:
        description: 'Firebase hosting channel ID'
        required: true
        type: string
      github_repo:
        description: 'The repository where the PR was opened.'
        required: true
        type: string
      head_repo:
        description: 'The repository of the head commit.'
        required: true
        type: string
      head_ref:
        description: 'The ref of the head commit.'
        required: true
        type: string
      gh_pat:
        description: 'GitHub PAT for commenting on PRs'
        required: true
        type: string
      room_id:
        description: 'Room ID for updating implementation records'
        required: false
        type: string

jobs:
  deploy_preview:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.head_repo }}
          ref: ${{ inputs.head_ref }}
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Determine build configuration
        run: |
          # Determine the correct build directory and set as environment variable
          BUILD_DIR="build"
          
          # Check if package.json exists first
          if [ -f "package.json" ]; then
            echo "📦 Existing package.json found"
            
            # Check for Vite
            if [ -f "vite.config.js" ] || [ -f "vite.config.ts" ] || grep -q '"vite"' package.json; then
              BUILD_DIR="dist"
              echo "🏗️ Detected Vite project, using 'dist' directory"
            # Check for Create React App
            elif grep -q '"react-scripts"' package.json; then
              BUILD_DIR="build"
              echo "🏗️ Detected Create React App, using 'build' directory"
            # Check for webpack
            elif [ -f "webpack.config.js" ] || grep -q '"webpack"' package.json; then
              # Check webpack config for output path
              if [ -f "webpack.config.js" ] && grep -q "path.*dist" webpack.config.js; then
                BUILD_DIR="dist"
                echo "🏗️ Detected webpack project with dist output, using 'dist' directory"
              elif [ -f "webpack.config.js" ] && grep -q "path.*build" webpack.config.js; then
                BUILD_DIR="build"
                echo "🏗️ Detected webpack project with build output, using 'build' directory"
              else
                # Default webpack behavior - check where files actually go after build
                BUILD_DIR="dist"
                echo "🏗️ Detected webpack project, defaulting to 'dist' directory"
              fi
            # Check for Next.js
            elif grep -q '"next"' package.json; then
              BUILD_DIR="out"
              echo "🏗️ Detected Next.js project, using 'out' directory"
            else
              BUILD_DIR="build"
              echo "🏗️ Using default 'build' directory"
            fi
          else
            # Will create Vite project, so use dist
            BUILD_DIR="dist"
            echo "🏗️ Will create Vite project, using 'dist' directory"
          fi
          
          # Set environment variable for subsequent steps
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          echo "✅ Build directory set to: $BUILD_DIR"

      - name: Check for package.json and install dependencies
        run: |
          if [ -f "package.json" ]; then
            echo "package.json found, installing dependencies..."
            if [ -f "package-lock.json" ] || [ -f "yarn.lock" ] || [ -f "npm-shrinkwrap.json" ]; then
              echo "Lock file found, using npm ci"
              npm ci
            else
              echo "No lock file found, using npm install"
              npm install
            fi
          else
            echo "No package.json found, creating React project with Vite..."
            npm create vite@latest . -- --template react-ts --yes
            npm install
            
            echo "React project with Vite created successfully"
          fi

      - name: Create firebase.json if not exists
        run: |
          if [ ! -f "firebase.json" ]; then
            echo "Creating firebase.json for hosting configuration..."
            echo "Using build directory: $BUILD_DIR"
            
            cat > firebase.json << EOF
          {
            "hosting": {
              "public": "$BUILD_DIR",
              "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
              ],
              "rewrites": [
                {
                  "source": "**",
                  "destination": "/index.html"
                }
              ]
            }
          }
          EOF
            echo "firebase.json created successfully with public directory: $BUILD_DIR"
          else
            echo "firebase.json already exists"
          fi

      - name: Build project
        run: |
          echo "🏗️ Using build directory: $BUILD_DIR"
          
          # Always ensure build directory exists
          mkdir -p "$BUILD_DIR"
          
          # Try to run the build script if package.json exists
          if [ -f "package.json" ]; then
            echo "📦 package.json found, attempting to build..."
            if npm run build; then
              echo "✅ Build completed successfully"
              
              # Check if build output is actually in our expected directory
              if [ "$(ls -A "$BUILD_DIR" 2>/dev/null)" ]; then
                echo "✅ Build directory contains files"
                echo "📁 Build output in $BUILD_DIR:"
                ls -la "$BUILD_DIR/"
              else
                echo "⚠️ Expected build directory ($BUILD_DIR) is empty, searching for build output..."
                
                # Search for common build output patterns
                FOUND_BUILD_DIR=""
                
                # Check common directories and current directory
                for dir in "dist" "build" "out" "."; do
                  if [ -f "$dir/index.html" ] || [ -f "$dir/bundle.js" ] || [ -f "$dir/main.js" ]; then
                    FOUND_BUILD_DIR="$dir"
                    echo "🔍 Found build output in: $dir"
                    ls -la "$dir/" | grep -E "\.(html|js|css)$" || echo "Files: $(ls "$dir/" | grep -E "\.(html|js|css)$" | tr '\n' ' ')"
                    break
                  fi
                done
                
                if [ -n "$FOUND_BUILD_DIR" ] && [ "$FOUND_BUILD_DIR" != "$BUILD_DIR" ]; then
                  echo "📋 Copying build output from $FOUND_BUILD_DIR to $BUILD_DIR"
                  if [ "$FOUND_BUILD_DIR" = "." ]; then
                    # Copy specific files from current directory
                    for file in *.html *.js *.css *.json; do
                      if [ -f "$file" ]; then
                        cp "$file" "$BUILD_DIR/"
                        echo "📄 Copied: $file"
                      fi
                    done
                  else
                    cp -r "$FOUND_BUILD_DIR"/* "$BUILD_DIR/" 2>/dev/null || echo "No files to copy from $FOUND_BUILD_DIR"
                  fi
                  echo "✅ Build output copied to $BUILD_DIR"
                else
                  echo "⚠️ No build output found, creating fallback content..."
                  cat > "$BUILD_DIR/index.html" << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Preview Deployment</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
                  .container { max-width: 600px; margin: 0 auto; }
                  h1 { color: #333; }
                  p { color: #666; line-height: 1.6; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>🚀 Preview Deployment Successful!</h1>
                  <p>Your repository has been successfully deployed to Firebase Hosting.</p>
                  <p>Build completed but no output found. Add your project files to customize this deployment.</p>
              </div>
          </body>
          </html>
          EOF
                fi
              fi
            else
              echo "❌ Build script failed, creating fallback content..."
              cat > "$BUILD_DIR/index.html" << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Preview Deployment</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
                  .container { max-width: 600px; margin: 0 auto; }
                  h1 { color: #333; }
                  p { color: #666; line-height: 1.6; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>🚀 Preview Deployment Successful!</h1>
                  <p>Your repository has been successfully deployed to Firebase Hosting.</p>
                  <p>Build failed. Check your project configuration and try again.</p>
              </div>
          </body>
          </html>
          EOF
            fi
          else
            echo "📄 No package.json found, creating basic preview page..."
            cat > "$BUILD_DIR/index.html" << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Preview Deployment</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
                  .container { max-width: 600px; margin: 0 auto; }
                  h1 { color: #333; }
                  p { color: #666; line-height: 1.6; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>🚀 Preview Deployment Successful!</h1>
                  <p>Your repository has been successfully deployed to Firebase Hosting.</p>
                  <p>This is a basic preview for a new repository. Add your project files to customize this deployment.</p>
              </div>
          </body>
          </html>
          EOF
          fi
          
          # Final verification
          echo "📁 Final build directory ($BUILD_DIR) contents:"
          ls -la "$BUILD_DIR/"
          echo "✅ Build directory ready for deployment"

      - name: Deploy to Firebase Hosting Channel
        id: firebase_deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.VIBETOGETHER_FIREBASE_SA }}
          channelId: ${{ inputs.channel_id }}
          projectId: vibetogether-app

      - name: Install firebase-admin for GitHub script
        run: npm install firebase-admin

      - name: Store Preview URL in Firebase Storage
        uses: actions/github-script@v7
        env:
          VIBETOGETHER_FIREBASE_SA: ${{ secrets.VIBETOGETHER_FIREBASE_SA }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const admin = require('firebase-admin');
            const original_repo = "${{ inputs.github_repo }}".split('/');
            const pr_number = parseInt("${{ inputs.pr_number }}");
            const channel_id = "${{ inputs.channel_id }}";
            
            // Try to get preview URL from Firebase deployment output
            let preview_url = "${{ steps.firebase_deploy.outputs.details_url }}";
            
            if (!preview_url) {
              // Fallback to using the main URL output
              preview_url = "${{ steps.firebase_deploy.outputs.url }}";
            }
            
            if (!preview_url) {
              // Final fallback: construct URL manually
              const project_id = 'vibetogether-app';
              preview_url = `https://${project_id}--${channel_id}-${Math.random().toString(36).substr(2, 8)}.web.app`;
              console.log('Using constructed preview URL as fallback:', preview_url);
            }
            
            console.log('Preview URL:', preview_url);
            
            // Log the preview URL information
            console.log('='.repeat(60));
            console.log('🚀 PREVIEW DEPLOYMENT SUCCESSFUL');
            console.log('='.repeat(60));
            console.log(`📄 Repository: ${original_repo.join('/')}`);
            console.log(`🔧 PR Number: #${pr_number}`);
            console.log(`🏷️  Channel ID: ${channel_id}`);
            console.log(`🌐 Preview URL: ${preview_url}`);
            console.log(`⏰ Deployed At: ${new Date().toISOString()}`);
            console.log('='.repeat(60));
            
            // Set the preview URL as a step output for potential use by other steps
            console.log(`::set-output name=preview_url::${preview_url}`);
            
            // Update the implementation record in Firestore with the preview URL
            const roomId = '${{ inputs.room_id }}';
            if (roomId && roomId.trim()) {
              try {
                const admin = require('firebase-admin');
                
                // Initialize Firebase Admin SDK if not already initialized
                if (!admin.apps.length) {
                  console.log('🔧 Initializing Firebase Admin SDK...');
                  
                  // Parse the service account from environment variable
                  const serviceAccountString = process.env.VIBETOGETHER_FIREBASE_SA;
                  if (!serviceAccountString) {
                    throw new Error('VIBETOGETHER_FIREBASE_SA environment variable is not set');
                  }
                  
                  const serviceAccount = JSON.parse(serviceAccountString);
                  
                  // Validate required fields
                  if (!serviceAccount.project_id || !serviceAccount.private_key || !serviceAccount.client_email) {
                    throw new Error('Service account is missing required fields');
                  }
                  
                  admin.initializeApp({
                    credential: admin.credential.cert(serviceAccount)
                  });
                  
                  console.log('✅ Firebase Admin SDK initialized successfully');
                }
                
                const firestore = admin.firestore();
                
                // Find implementations in the specified room that match this PR
                const implementationsRef = firestore.collection('rooms').doc(roomId).collection('implementations');
                  const querySnapshot = await implementationsRef.where('prUrl', '==', `https://github.com/${original_repo.join('/')}/pull/${pr_number}`).get();
                  
                  if (!querySnapshot.empty) {
                    // Update each matching implementation with the preview URL
                    const batch = firestore.batch();
                    querySnapshot.docs.forEach(doc => {
                      batch.update(doc.ref, {
                        previewChannelUrl: preview_url,
                        updatedAt: admin.firestore.FieldValue.serverTimestamp()
                      });
                    });
                    
                    await batch.commit();
                    console.log(`✅ Updated ${querySnapshot.size} implementations with preview URL in room ${roomId}`);
                  } else {
                    console.log(`⚠️ No implementations found for PR ${pr_number} in room ${roomId}`);
                  }
                
              } catch (firestoreError) {
                console.log(`⚠️ Could not update Firestore with preview URL: ${firestoreError.message}`);
                // Don't fail the workflow for this
              }
            } else {
              console.log('⚠️ Room ID not provided, skipping Firestore update');
            }
            
            console.log('✅ Preview deployment completed successfully!');
